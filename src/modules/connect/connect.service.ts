import { Injectable, OnModuleInit } from '@nestjs/common';
import { Context, Markup } from 'telegraf';
import { mkdir, writeFile } from 'fs/promises';
import * as fs from 'fs';
import { join, dirname, resolve } from 'path';
import axios from 'axios';
import { readFileSync } from 'fs';
import { UserService } from '../user/user.service';
import { QuizService } from '../quiz/quiz.service';
import { text_for_quiz } from './text';

@Injectable()
export class ConnectService implements OnModuleInit {
  constructor(
    private readonly userService: UserService,
    private readonly quizService: QuizService,
  ) {}

  onModuleInit() {
    const dirPath = join(__dirname, '..', '..', '..', 'uploads', 'user_photos');

    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  }

  async handleQuiz(ctx: Context) {
    const quizzes = this.quizService.getAllQuizzes();

    if (!quizzes.length) {
      await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤.');
      return;
    }

    const buttons = quizzes.map((quiz) => [
      Markup.button.callback(quiz.name, `start_quiz_${quiz.id}`),
    ]);

    await ctx.reply(text_for_quiz, Markup.inlineKeyboard(buttons));
  }

  async getQuizById(quizId: string) {
    const faqDataPath = resolve(__dirname, '../../../jsons/quiz.json');
    const faqData = JSON.parse(readFileSync(faqDataPath, 'utf-8'));
    return faqData.quizzes.find(
      (quiz) =>
        quiz.id.trim().toLowerCase() === String(quizId).trim().toLowerCase(),
    );
  }

  async handleColleague(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID. /start');
      return;
    }

    const user = await this.userService.getTopRatedUser();

    if (!user) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–≥.');
      return;
    }

    const user_profile = await this.userService.getProfile(telegramId);

    if (user_profile) {
      const caption =
        `üë§ ${user_profile.full_name}\n` +
        `üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${user_profile.position}\n` +
        `üèôÔ∏è –ì–æ—Ä–æ–¥: ${user_profile.city}\n` +
        `ü¶∏ –°—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${user_profile.superpower}\n` +
        `üé® –õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: ${user_profile.favorite_color}\n` +
        `üêæ –õ—é–±–∏–º–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: ${user_profile.favorite_animal}\n` +
        `üé¨ –õ—é–±–∏–º—ã–π —Ñ–∏–ª—å–º: ${user_profile.favorite_movie}\n` +
        `üí≠ –ú–µ—á—Ç–∞: ${user_profile.dream}\n` +
        `üì± VK: ${user_profile.vk}\n` +
        `üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–µ—Ç–∏: ${user_profile.banned_social}\n` +
        `üéØ –£–≤–ª–µ—á–µ–Ω–∏—è: ${user_profile.hobbies}\n` +
        `ü§ù –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: ${user_profile.friend_goal}`;

      const photoPath = user.photo_url
        ? user.photo_url
        : join(
            __dirname,
            '..',
            '..',
            '..',
            'uploads',
            'user_photos',
            'not_user_photo.jpg',
          );

      if (fs.existsSync(photoPath)) {
        await ctx.replyWithPhoto({ source: photoPath }, { caption });
      } else {
        await ctx.reply(
          '–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –Ω–µ—Ç—É, —Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ —Ñ–æ—Ç–æ: –î–ª—è –≤—Å–µ—Ö',
        );
        await ctx.replyWithPhoto(
          {
            source: join(
              __dirname,
              '..',
              '..',
              '..',
              'uploads',
              'user_photos',
              'not_user_photo.jpg',
            ),
          },
          { caption },
        );
      }
    } else {
      const caption =
        `üë§ @${user?.username}\n` +
        `${user?.first_name} ${user?.last_name}` +
        (user.username ? `üîó @${user.username}` : '');

      const photoPath = user.photo_url
        ? user.photo_url
        : join(
            __dirname,
            '..',
            '..',
            '..',
            'uploads',
            'user_photos',
            'not_user_photo.jpg',
          );

      if (fs.existsSync(photoPath)) {
        await ctx.replyWithPhoto({ source: photoPath }, { caption });
      } else {
        await ctx.reply(
          '–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –Ω–µ—Ç—É, —Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ —Ñ–æ—Ç–æ: –î–ª—è –≤—Å–µ—Ö',
        );
        await ctx.replyWithPhoto(
          {
            source: join(
              __dirname,
              '..',
              '..',
              '..',
              'uploads',
              'user_photos',
              'not_user_photo.jpg',
            ),
          },
          { caption },
        );
      }
    }
  }

  async handleFAQ(ctx: Context) {
    const faqDataPath = resolve(__dirname, '../../../jsons/faq.json');
    const faqData = JSON.parse(readFileSync(faqDataPath, 'utf-8'));
    // eslint-disable-next-line
    const buttons = faqData.map(item =>
      // eslint-disable-next-line
      [Markup.button.callback(item.label, `faq_${item.key}`)]  
    );

    buttons.push([Markup.button.callback('–ú–æ–π –±–∞–ª–ª—ã –∏ –Ω–∞–≥—Ä–∞–¥—ã', 'my_balls')]);

    buttons.push([
      Markup.button.callback('–ö–æ–¥—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π', 'additional_event'),
    ]);

    await ctx.reply(
      'üìã –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:',
      Markup.inlineKeyboard(buttons),
    );
  }

  async handleChallenge(ctx: Context) {
    const userId = ctx.from?.id;
    if (!userId) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–∂–º–∏—Ç–µ /start');
    }

    const user = await this.userService.findUser(userId);

    if (user.rating) {
      await ctx.reply(
        `üí∞ –£ —Ç–µ–±—è ${user.rating * 10} –±–∞–ª–ª–æ–≤.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∞—á–∏–≤–∫–∏!`,
      );
    } else {
      await ctx.reply(
        `üí∞ –£ —Ç–µ–±—è 0 –±–∞–ª–ª–æ–≤.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∞—á–∏–≤–∫–∏!`,
      );
    }
  }

  async downloadImage(url: string, dest: string): Promise<string> {
    try {
      const dir = dirname(dest);
      if (!fs.existsSync(dir)) {
        await mkdir(dir, { recursive: true });
      }

      const response = await axios.get<any>(url, {
        responseType: 'arraybuffer',
      });

      if (response.status !== 200) {
        throw new Error(`Failed to get '${url}' (${response.status})`);
      }

      await writeFile(dest, response.data);
      return dest;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error}`);
    }
  }
}
